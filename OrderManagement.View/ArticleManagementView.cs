using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.EntityFrameworkCore;
using OrderManagement.Data.Context;
using OrderManagement.Data.Model;

namespace OrderManagement.View
{
    public partial class ArticleManagementView : Form
    {
        private DataContext _context;
        public ArticleManagementView()
        {
            InitializeComponent();
            

           /* 
            context.Article.Load();
            GrdArticle.DataSource = context.Article.Local.ToBindingList();*/
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            _context = new DataContext();
            _context.Article.Load();

            //GrdArticle
            this.GrdArticle.DataSource = _context.Article.Local.ToBindingList();
            GrdArticle.Columns["ID"].Visible = false;
            GrdArticle.Columns["ValidFrom"].Visible = false;
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            this._context.Dispose();
        }

        private void CmdSaveArticle_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities
            // that are removed from a navigation property (in our example the Products)
            // as deleted in the context.
            // The following code uses LINQ to Objects against the Local collection
            // to find all products and marks any that do not have
            // a Category reference as deleted.
            // The ToList call is required because otherwise
            // the collection will be modified
            // by the Remove call while it is being enumerated.
            // In most other situations you can do LINQ to Objects directly
            // against the Local property without using ToList first.
        /*    foreach (var article in _context.Article.Local.ToList())
            {
                if (article == null)
                {
                    _context.Article.Remove(article);
                }
            }*/

            // Save the changes to the database.
            this._context.SaveChanges();

            // Refresh the controls to show the values         
            // that were generated by the database.
            this.GrdArticle.Refresh();
        }
    }
}
